/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:kdo
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Divisible Lighting and Shades v1"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
#DIGITAL_EXPAND			InputsWithOutputs
#ANALOG_SERIAL_EXPAND 	InputsWithOutputs
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
#DEFINE_CONSTANT NUMZONES	4
#DEFINE_CONSTANT NUMPRESETS	4
/***************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT _skip_, _skip_, RM1_ShadesUp, RM1_ShadesDown, RM1_ShadesStop, _skip_, RM2_ShadesUp, RM2_ShadesDown, RM2_ShadesStop,
	_skip_, _skip_, RM1_LtPresets[NUMPRESETS], _skip_, RM2_LtPresets[NUMPRESETS];
ANALOG_INPUT _skip_, _skip_, RoomMode, _skip_, RM1_LtLevel[NUMZONES], _skip_, RM2_LtLevel[NUMZONES];

DIGITAL_OUTPUT _skip_, _skip_, RM1_ShadesUp_Go, RM1_ShadesDown_Go, RM1_ShadesStop_Go, _skip_, RM2_ShadesUp_Go, RM2_ShadesDown_Go, RM2_ShadesStop_Go,
	_skip_, _skip_, RM1_LtPresets_fb[NUMPRESETS], _skip_, RM2_LtPresets_fb[NUMPRESETS];
ANALOG_OUTPUT _skip_, _skip_, _skip_, _skip_, RM1_LtLevel_Go[NUMZONES], _skip_, RM2_LtLevel_Go[NUMZONES];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER RoomState;



/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/ 



CHANGE RoomMode
{
	RoomState = RoomMode;
}
 
PUSH RM1_ShadesUp
{
	if(RoomState){
    	PULSE(300, RM1_ShadesUp_Go);
		PULSE(300, RM2_ShadesUp_Go);
	} else {
    	PULSE(300, RM1_ShadesUp_Go);
	}
}
PUSH RM2_ShadesUp
{
	if(RoomState){
    	PULSE(300, RM1_ShadesUp_Go);
		PULSE(300, RM2_ShadesUp_Go);
	} else {
    	PULSE(300, RM2_ShadesUp_Go);
	}
}
PUSH RM1_ShadesDown
{
	if(RoomState){
    	PULSE(300, RM1_ShadesDown_Go);
		PULSE(300, RM2_ShadesDown_Go);
	} else {
    	PULSE(300, RM1_ShadesDown_Go);
	}
}
PUSH RM2_ShadesDown
{
	if(RoomState){
    	PULSE(300, RM1_ShadesDown_Go);
		PULSE(300, RM2_ShadesDown_Go);
	} else {
    	PULSE(300, RM2_ShadesDown_Go);
	}
}
PUSH RM1_ShadesStop
{
	if(RoomState){
    	PULSE(300, RM1_ShadesStop_Go);
		PULSE(300, RM2_ShadesStop_Go);
	} else {
    	PULSE(300, RM1_ShadesStop_Go);
	}
}
PUSH RM2_ShadesStop
{
	if(RoomState){
    	PULSE(300, RM1_ShadesDown_Go);
		PULSE(300, RM2_ShadesDown_Go);
	} else {
    	PULSE(300, RM2_ShadesDown_Go);
	}
}
PUSH RM1_LtPresets
{
	integer presetPressed;
	presetPressed = GetLastModifiedArrayIndex();
	if(RoomState){
    	setArray(RM1_LtPresets_fb, 0);
		setArray(RM2_LtPresets_fb, 0);
		RM1_LtPresets_fb[presetPressed] = 1;
		RM2_LtPresets_fb[presetPressed] = 1;
	} else {
    	setArray(RM1_LtPresets_fb, 0);
		RM1_LtPresets_fb[presetPressed] = 1;
	}

}
PUSH RM2_LtPresets
{
	integer presetPressed;
	presetPressed = GetLastModifiedArrayIndex();
	if(RoomState){
    	setArray(RM1_LtPresets_fb, 0);
		setArray(RM2_LtPresets_fb, 0);
		RM1_LtPresets_fb[presetPressed] = 1;
		RM2_LtPresets_fb[presetPressed] = 1;
	} else {
    	setArray(RM2_LtPresets_fb, 0);
		RM2_LtPresets_fb[presetPressed] = 1;
	}

}
CHANGE RM1_LtLevel
{
	integer levelChanged;
	levelChanged = GetLastModifiedArrayIndex();
	if(RoomState){
    	RM1_LtLevel_Go[levelChanged] = RM1_LtLevel[levelChanged];
		RM2_LtLevel_Go[levelChanged] = RM1_LtLevel[levelChanged];
	} else {
    	RM1_LtLevel_Go[levelChanged] = RM1_LtLevel[levelChanged];
	}
}
CHANGE RM2_LtLevel
{
	integer levelChanged;
	levelChanged = GetLastModifiedArrayIndex();
	if(RoomState){
    	RM1_LtLevel_Go[levelChanged] = RM2_LtLevel[levelChanged];
		RM2_LtLevel_Go[levelChanged] = RM2_LtLevel[levelChanged];
	} else {
    	RM2_LtLevel_Go[levelChanged] = RM2_LtLevel[levelChanged];
	}
}






/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	RoomState = 0;
    WaitForInitializationComplete();
}


