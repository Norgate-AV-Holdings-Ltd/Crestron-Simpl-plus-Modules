/*******************************************************************************************
  SIMPL+ Module Information
*******************************************************************************************/
/*
Dealer Name:  dcw
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Acuity Lighting"



#DEFINE_CONSTANT	cHeader	"\xA5"


// #CATEGORY "" 
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/



/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
DIGITAL_INPUT Lights_1_on, Lights_1_off;
DIGITAL_INPUT Lights_2_on, Lights_2_off;
DIGITAL_INPUT Lights_3_on, Lights_3_off;

ANALOG_INPUT Scene, _skip_, Load[8];
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT Tx$;


/*******************************************************************************************
  Parameters
*******************************************************************************************/
// INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES 
   propValidUnits = unitString;  unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   propDefaultUnit = unitString;  unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = { "value" , "label" } , { "value" , "label" };
#END_PARAMETER_PROPERTIES
*/


/*******************************************************************************************
  Global Variables
*******************************************************************************************/
INTEGER iPos;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING command$[10];
STRING Pos$[2];

/*******************************************************************************************
  Functions
*******************************************************************************************/

Function Checksum()
{
	 integer chk1, chk2;
	 
	 iPos = len(command$) + 4;
	 
	 If(ipos = 6)
	 {
	 	chk1 = not(byte(cheader, 1)^byte(command$, 1));
	 	chk2 = not(ipos^byte(command$, 2));
	 	
	 	tx$ = cheader + chr(ipos) + command$ + chr(chk1) + chr(chk2);
	 }
	 
	 If(ipos = 8)
	 {
	 	chk1 = not(byte(cheader, 1)^byte(command$, 1)^byte(command$, 3));
	 	chk2 = not(ipos^byte(command$, 2)^byte(command$, 4));
	 	
	 	tx$ = cheader + chr(ipos) + command$ + chr(chk1) + chr(chk2);
	 }	 
}


/*******************************************************************************************
  Event Handlers
*******************************************************************************************/

PUSH Lights_1_on
{
	command$ = "\x7A\x01\x01\x00";
	
	Checksum();
}

PUSH Lights_1_off
{
	command$ = "\x7A\x01\x02\x00";
	
	Checksum();
}

PUSH Lights_2_on
{
	command$ = "\x7A\x02\x01\x00";
	
	Checksum();
}

PUSH Lights_2_off
{
	command$ = "\x7A\x02\x02\x00";
	
	Checksum();
}

PUSH Lights_3_on
{
	command$ = "\x7A\x03\x01\x00";
	
	Checksum();
}

PUSH Lights_3_off
{
	command$ = "\x7A\x03\x02\x00";
	
	Checksum();
}

change scene
{
	Command$ = "\x85" + chr(scene);
	
	Checksum();
}

Change load
{
	integer n;
	n = getlastmodifiedarrayindex();
	
	Command$ = "\x7A" + chr(n) + "\x05" + chr(load[n]);
	
	Checksum();
}

/*******************************************************************************************
  Main()
*******************************************************************************************/

Function Main()
{
    integer i;
    
    WaitForInitializationComplete();
    
}


