/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:kdo
Comments: adding a temporary video switcher object to touch-10 control
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Cisco Touch 10 Room Control Video Switcher v1"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "20"		// conferencing 
// #PRINT_TO_TRACE
#DIGITAL_EXPAND InputsWithOutputs 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
#DEFINE_CONSTANT		NUM_INPUTS		8
#DEFINE_CONSTANT		BUFFER_SIZE		1500
#DEFINE_CONSTANT		SOURCE_NAME_LEN	50
/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 	_skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, 
				_skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, connectedFB, sendInputs, videoReady[NUM_INPUTS];
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT _skip_, _skip_, fromDevice[BUFFER_SIZE];

DIGITAL_OUTPUT	_skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, 
				_skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, videoSelected[NUM_INPUTS];
// ANALOG_OUTPUT 
STRING_OUTPUT	_skip_, toDevice; 

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER	ConnectorID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER	SourceName[NUM_INPUTS][SOURCE_NAME_LEN];
STRING_PARAMETER	IconType[NUM_INPUTS][SOURCE_NAME_LEN];


/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES ConnectorID
	propValidUnits = unitDecimal;
	propDefaultUnit = unitDecimal;
	propDefaultValue = 3d;
	propShortDescription = "enter the connector the video is connected to";
#END_PARAMETER_PROPERTIES
                                
#BEGIN_PARAMETER_PROPERTIES SourceName
	propValidUnits = unitString;
	propDefaultUnit = unitString;
	propDefaultValue = "Table Input";
	propShortDescription = "source name as it will appear on the touch-10";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IconType
	propValidUnits = unitString;
	propDefaultUnit = unitString;
	propDefaultValue = "Table Input";
	propShortDescription = "associate icons to SourceNames";
	propList = { "pc", "PC" }, { "camera", "Camera" }, { "desktop", "Desktop" }, { "document_camera", "Document Camera" },
								{ "mediaplayer", "Media Player" }, { "other", "Other" }, { "whiteboard", "White Board" };
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER			_numActiveSources;
INTEGER			_numSignalsDefined;
INTEGER			_firstPass;
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING			_sourceIdentifier[NUM_INPUTS][SOURCE_NAME_LEN];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function addInputToCodec(integer i)
{
	makeString(toDevice, "xcommand UserInterface Presentation ExternalSource Add ConnectorID: %d Name: \x22%s\x22 SourceIdentifier: %s Type: %s\n",
							ConnectorID, SourceName[i], _sourceIdentifier[i], IconType[i]); 		
}


Function createSourceIdentifiers()
{
	integer i;
	integer k;
	string tempString[SOURCE_NAME_LEN];
	for(i = 1 to _numSignalsDefined)
	{
		// lower text and replace spaces with underscores
		tempString = "";
    	for(k = 1 to len(SourceName[i]))
		{
			// trace("%s", SourceName[i]);
        	if(byte(SourceName[i], k) = 0x20)
			{
            	tempString = tempString + "_";	
			}
			else 
			{
            	tempstring = tempString + chr(byte(SourceName[i], k));
			}
		}
		_sourceIdentifier[i] = lower(tempString);
		// trace("%s", _sourceIdentifier[i]);
	}
}


Function sendInputsToCodec()
{
	integer i;
	for(i = 1 to _numSignalsDefined)
	{
    	addInputToCodec(i);
	}
}

Function setInputState(integer i, string state)
{
	if(connectedFB)
	{
    	makeString(toDevice, "xcommand UserInterface Presentation ExternalSource State Set State: %s SourceIdentifier: %s\n", 
							state, _sourceIdentifier[i]);
	}
}

// *e UserInterface Presentation ExternalSource Selected SourceIdentifier: “appletv”
Function processResponse(string gatheredResponse)
{
	string trash[250], tempSourceIdentifier[50];
	integer i, k, quoteStart, quoteEnd;
	if(find("ExternalSource Selected SourceIdentifier:", gatheredResponse) > 0)
	{
    	trash = remove("\x22", gatheredResponse);
		tempSourceIdentifier = remove("\x22", gatheredResponse);
		tempSourceIdentifier = mid(tempSourceIdentifier, 1, len(tempSourceIdentifier) - 1);
		for(i = 1 to _numSignalsDefined)
		{
			if(tempSourceIdentifier = _sourceIdentifier[i])
			{
            	pulse(50, videoSelected[i]);
			}
		}
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH connectedFB
{
	if(_firstPass = 0)
	{
		makeString(toDevice, "xFeedback register Event/UserInterface/Presentation/ExternalSource");
		delay(50);
    	sendInputsToCodec();
		_firstPass = 1;
	}
}

PUSH videoReady
{
	integer n;
	n = getLastModifiedArrayIndex();
	setInputState(n, "Ready");
}

RELEASE videoReady
{
	integer n;
	n = getLastModifiedArrayIndex();
	setInputState(n, "NotReady");
}

THREADSAFE CHANGE fromDevice
{
	string tempResponse[BUFFER_SIZE];
	while(1)
	{
    	try
		{
        	tempResponse = gather("\x0D\x0A", fromDevice);
			processResponse(tempResponse);
		}
		catch
		{
        	generateUserNotice("Cisco Touch 10 Video Switcher: Error Processing response data");
		}
	}
}

PUSH sendInputs
{
	sendInputsToCodec();
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{	
	integer i;
	_firstPass = 0;
	WaitForInitializationComplete();
	for(i = NUM_INPUTS to 1 step -1)
	{
    	if(isSignalDefined(videoReady[i]))
		{
        	_numSignalsDefined = i;
			break;
		}
	}
	delay(50);
	createSourceIdentifiers();
}
