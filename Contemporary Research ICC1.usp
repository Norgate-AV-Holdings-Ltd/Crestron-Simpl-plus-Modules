/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:kdo
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Contemporary Research ICC1"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   Valid volume levels in are 1 - 63.  Feedback is faked (1 way serial - no response from ice-hd)
#HELP_END


#DEFINE_CONSTANT		HEADER 			"\xA5"
#DEFINE_CONSTANT		PWRON 			"P1"
#DEFINE_CONSTANT		PWROFF 			"P0"
#DEFINE_CONSTANT		VOL 			"VL"
#DEFINE_CONSTANT		TUNESTYLE 		"\x02"
#DEFINE_CONSTANT		CUSTOMSTRING 	"UX"
#DEFINE_CONSTANT		CHUP	 		"TU"
#DEFINE_CONSTANT		CHDOWN	 		"TD"
#DEFINE_CONSTANT		TUNEHD	 		"TH"
#DEFINE_CONSTANT		CHANNEL 		"TT"
#DEFINE_CONSTANT 		CHARS  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 	_skip_, _skip_, powerOn, powerOff, _skip_, _skip_, channel2, channel3, channel4, channel5, channel6,
				channel7, channel8, channel9;
DIGITAL_INPUT	_skip_, inputHDMI, inputCATV;
ANALOG_INPUT	_skip_, volIn; 
STRING_INPUT 	_skip_, passThrough[50];
// BUFFER_INPUT 

DIGITAL_OUTPUT 	_skip_, _skip_, powerOn_fb, powerOff_fb, _skip_, _skip_, channel2_fb, channel3_fb, channel4_fb, channel5_fb, channel6_fb,
				channel7_fb, channel8_fb, channel9_fb;
DIGITAL_OUTPUT	_skip_, inputHDMI_fb, inputCATV_fb;
// ANALOG_OUTPUT 
STRING_OUTPUT 	_skip_, toDevice;


/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER	GroupNumber, DeviceNumber;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES GroupNumber
   propValidUnits = unitHex; 
   propDefaultUnit = unitHex; 
   propDefaultValue = 0x01;  
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES DeviceNumber
   propValidUnits = unitHex; 
   propDefaultUnit = unitHex; 
   propDefaultValue = 0x01;  
#END_PARAMETER_PROPERTIES
                            


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING	command[100];
INTEGER codes[255];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
 

INTEGER_FUNCTION getCommandLength(String str)
{
	INTEGER sum, i;
	sum = 0;
	for (i = 1 TO len(str)) {
    	sum = sum + byte(str, i);
	}
	return (sum);
}





/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH powerOn
{	
	INTEGER commandLength;
	commandLength = len(PWRON);
	makestring(toDevice, "%s%s%s%s%s", HEADER, chr(GroupNumber), chr(DeviceNumber),  itoa(commandLength), PWRON);
}

PUSH powerOff
{	
	INTEGER commandLength;
	commandLength = len(PWROFF);
	makestring(toDevice, "%s%s%s%s%s", HEADER, chr(GroupNumber), chr(DeviceNumber),  itoa(commandLength), PWROFF);
}

PUSH channel2
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s21", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel3
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s31", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel4
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s41", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel5
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s51", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel6
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s61", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel7
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s71", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel8
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s81", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH channel9
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s91", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH inputHDMI
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s0211", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

PUSH inputCATV
{
	INTEGER commandLength;
	commandLength = len(TUNEHD);
	makestring(toDevice, "%s%s%s%s%s0200", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), TUNEHD);
}

CHANGE volIn
{
	INTEGER commandLength;
	commandLength = len(VOL);
	makestring(toDevice, "%s%s%s%s%s0200", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), VOL);
}

THREADSAFE CHANGE passThrough
{
	INTEGER commandLength;
	STRING tempString[50];
	tempString = passThrough;
	commandLength = len(tempString) + 2;
	makestring(toDevice, "%s%s%s%s%s", HEADER, chr(GroupNumber), chr(DeviceNumber), itoa(commandLength), tempString);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	command = "";
    WaitForInitializationComplete();
}

