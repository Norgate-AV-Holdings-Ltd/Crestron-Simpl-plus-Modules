/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "ReadPasswordsFromFile"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
#ENABLE_TRACE
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

#DEFINE_CONSTANT	cfilebuf	1000
#DEFINE_CONSTANT	numOutputs	5

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, _skip_, _skip_, _skip_, readFile, updateOutputs, saveNewPassword;
DIGITAL_INPUT _skip_, enter, clear, num1, num2, num3, num4, num5, num6, num7, num8, num9, num0, _skip_;
ANALOG_INPUT _skip_, passwordToChange;
STRING_INPUT newPasswordIn$[10];
// BUFFER_INPUT 

DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_, savedFb, pwSuper, pwBasic, pwAdvance, pwGarden, invalid;
// ANALOG_OUTPUT 
STRING_OUTPUT  _skip_, stars$, textField$;
STRING_OUTPUT  _skip_, _skip_, _skip_, _skip_, passwordOut$[5];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER FileName$[35];
STRING_PARAMETER BackdoorPWord$[5];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES FileName$
	propValidUnits = unitString; 
    propDefaultUnit = unitString; 
    propDefaultValue = "Passwords";  
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES BackdoorPWord$
	propValidUnits = unitString; 
    propDefaultUnit = unitString; 
    propDefaultValue = "1988";  
#END_PARAMETER_PROPERTIES



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
SIGNED_INTEGER		nfilehandle;
// SIGNED_LONG_INTEGER
STRING				sBuf[cfilebuf];
STRING				temp1$[cfilebuf];
STRING				savedPasswords$[numOutputs][10];
STRING				realFileName$[50];
STRING				userInput$[100];
STRING				starsHold$[10];
INTEGER				changeThisPassword;
STRING				textFieldHold$[10];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function clearAll()
{
	userInput$ = "";
	stars$ = "";
	textField$ = "";
	starsHold$ = "";
	textFieldHold$ = "";
}


Function readLine()
{
	string temp2$[25];
	integer n;

	for (n = 1 TO numOutputs)
	{
    	temp2$ = remove("\n", temp1$);
		trace("reading a line");
		savedPasswords$[n] = left(temp2$, len(temp2$)-2);
	}
}

Function readFileGo()
{
	integer n;
	startFileOperations();
	nfilehandle = fileOpen(realFileName$, _o_rdonly | _o_text);
	if (nfilehandle >= 0)
	{
		while (FileRead(nfilehandle, sBuf, cFileBuf) > 0)
		{
			trace("Reading from file");
        	temp1$ = sBuf; 
		}
		readLine();
		
		fileClose(nfilehandle);
	} else {
    	trace("Didn't find the file");
	}
	endfileoperations();
}

Function writeFileGo()
{
	integer n;
	string fileWriteBuf[cfileBuf];
	trace("Writing to file: Begin");
	
	for(n = 1 to numOutputs)
	{
    	fileWriteBuf = fileWriteBuf + savedPasswords$[n] + "\n";
	}
	startFileOperations();
	nfilehandle = fileopen(realFileName$, _o_wronly | _o_text);
	if(nfilehandle >=0)
	{	
		trace("File found.  Writing passwords to file.");
    	fileWrite(nfilehandle, fileWriteBuf, len(fileWriteBuf));
		fileClose(nfilehandle);
	} else {
		trace("Error opening Passwords.txt.  File NOT written");
	}
	endFileOperations();
}

Function checkPassword()
{
	if(userInput$ = backdoorPWord$) { PULSE(300, pwSuper); }
	else if(userInput$ = savedPasswords$[1]) { PULSE(300, pwBasic); }
	else if(userInput$ = savedPasswords$[2]) { PULSE(300, pwAdvance); }
	else if(userInput$ = savedPasswords$[3]) { PULSE(300, pwGarden); }
	else if(userInput$ = savedPasswords$[4]) { PULSE(300, pwSuper); }
	else { PULSE(300, Invalid); }
	call clearAll();
}

   
Function numberPad(String s)
{
	textFieldHold$ = textFieldHold$ + s;
	starsHold$ = starsHold$ + "*";
	userInput$ = userInput$ + s;
	stars$ = starsHold$;
	// starsOut$ = stars$;
	textField$ = textFieldHold$;
}

Function updatePasswordFb()
{
	integer n;
	for (n = 1 TO numOutputs)
	{
		passwordOut$[n] = savedPasswords$[n];
	}
	
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH readFile 
{
	call readFileGo();
	updatePasswordFb();
}


PUSH updateOutputs
{
	updatePasswordFb();
}

CHANGE passwordToChange
{
	changeThisPassword = passwordToChange;
}

PUSH saveNewPassword
{
	savedFb = 1;
	savedPasswords$[changeThisPassword] = newPasswordIn$;
	call writeFileGo();
	clearAll();
	savedFb = 0;
	updatePasswordFb();
	
}

CHANGE newPasswordIn$
{
	textField$ = newPasswordIn$;
}

PUSH num1		{ call numberPad("1"); }
PUSH num2		{ call numberPad("2"); }
PUSH num3		{ call numberPad("3"); }
PUSH num4		{ call numberPad("4"); }
PUSH num5		{ call numberPad("5"); }
PUSH num6		{ call numberPad("6"); }
PUSH num7		{ call numberPad("7"); }
PUSH num8		{ call numberPad("8"); }
PUSH num9		{ call numberPad("9"); }
PUSH num0		{ call numberPad("0"); }
 
PUSH enter
{
	call checkPassword();
}

PUSH clear
{
	clearAll();
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
	realFileName$ = "\\NVRAM\\" + FileName$ + ".txt";
    textField$ = "";
	userInput$ = "";
	stars$ = "";
	changeThisPassword = 0;
	starsHold$ = "";
	textFieldHold$ = "";
}


